[{'call_name': 'fill_block', 'call_args': [{'name': 'ratio', 'type': 48, 'typeName': 'Perbill', 'docs': []}], 'documentation': 'A dispatch that will fill the block weight up to the given ratio.', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'remark', 'call_args': [{'name': 'remark', 'type': 10, 'typeName': 'Vec<u8>', 'docs': []}], 'documentation': 'Make some on-chain remark.\n\n# <weight>\n- `O(1)`\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'set_heap_pages', 'call_args': [{'name': 'pages', 'type': 8, 'typeName': 'u64', 'docs': []}], 'documentation': "Set the number of pages in the WebAssembly environment's heap.\n\n# <weight>\n- `O(1)`\n- 1 storage write.\n- Base Weight: 1.405 µs\n- 1 write to HEAP_PAGES\n- 1 digest item\n# </weight>", 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'set_code', 'call_args': [{'name': 'code', 'type': 10, 'typeName': 'Vec<u8>', 'docs': []}], 'documentation': 'Set the new runtime code.\n\n# <weight>\n- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`\n- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is\n  expensive).\n- 1 storage write (codec `O(C)`).\n- 1 digest item.\n- 1 event.\nThe weight of this function is dependent on the runtime, but generally this is very\nexpensive. We will treat this as a full block.\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'set_code_without_checks', 'call_args': [{'name': 'code', 'type': 10, 'typeName': 'Vec<u8>', 'docs': []}], 'documentation': 'Set the new runtime code without doing any checks of the given `code`.\n\n# <weight>\n- `O(C)` where `C` length of `code`\n- 1 storage write (codec `O(C)`).\n- 1 digest item.\n- 1 event.\nThe weight of this function is dependent on the runtime. We will treat this as a full\nblock. # </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'set_changes_trie_config', 'call_args': [{'name': 'changes_trie_config', 'type': 16, 'typeName': 'Option<ChangesTrieConfiguration>', 'docs': []}], 'documentation': 'Set the new changes trie configuration.\n\n# <weight>\n- `O(1)`\n- 1 storage write or delete (codec `O(1)`).\n- 1 call to `deposit_log`: Uses `append` API, so O(1)\n- Base Weight: 7.218 µs\n- DB Weight:\n    - Writes: Changes Trie, System Digest\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'set_storage', 'call_args': [{'name': 'items', 'type': 49, 'typeName': 'Vec<KeyValue>', 'docs': []}], 'documentation': 'Set some items of storage.\n\n# <weight>\n- `O(I)` where `I` length of `items`\n- `I` storage writes (`O(1)`).\n- Base Weight: 0.568 * i µs\n- Writes: Number of items\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'kill_storage', 'call_args': [{'name': 'keys', 'type': 51, 'typeName': 'Vec<Key>', 'docs': []}], 'documentation': 'Kill some items from storage.\n\n# <weight>\n- `O(IK)` where `I` length of `keys` and `K` length of one key\n- `I` storage deletions.\n- Base Weight: .378 * i µs\n- Writes: Number of items\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'kill_prefix', 'call_args': [{'name': 'prefix', 'type': 10, 'typeName': 'Key', 'docs': []}, {'name': 'subkeys', 'type': 4, 'typeName': 'u32', 'docs': []}], 'documentation': 'Kill all storage items with a key that starts with the given prefix.\n\n**NOTE:** We rely on the Root origin to provide us the number of subkeys under\nthe prefix we are removing to accurately calculate the weight of this function.\n\n# <weight>\n- `O(P)` where `P` amount of keys with prefix `prefix`\n- `P` storage deletions.\n- Base Weight: 0.834 * P µs\n- Writes: Number of subkeys + 1\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'remark_with_event', 'call_args': [{'name': 'remark', 'type': 10, 'typeName': 'Vec<u8>', 'docs': []}], 'documentation': 'Make some on-chain remark and emit event.\n\n# <weight>\n- `O(b)` where b is the length of the remark.\n- 1 event.\n# </weight>', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 100}, {'call_name': 'set', 'call_args': [{'name': 'now', 'type': 67, 'typeName': 'T::Moment', 'docs': []}], 'documentation': "Set the current time.\n\nThis call should be invoked exactly once per block. It will panic at the finalization\nphase, if this call hasn't been invoked by that time.\n\nThe timestamp should be greater than the previous one by the amount specified by\n`MinimumPeriod`.\n\nThe dispatch origin for this call must be `Inherent`.\n\n# <weight>\n- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)\n- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in\n  `on_finalize`)\n- 1 event handler `on_timestamp_set`. Must be `O(1)`.\n# </weight>", 'module_prefix': 'Timestamp', 'module_name': 'Timestamp', 'spec_version': 100}, {'call_name': 'report_equivocation', 'call_args': [{'name': 'equivocation_proof', 'type': 73, 'typeName': 'Box<EquivocationProof<T::Hash, T::BlockNumber>>', 'docs': []}, {'name': 'key_owner_proof', 'type': 84, 'typeName': 'T::KeyOwnerProof', 'docs': []}], 'documentation': 'Report voter equivocation/misbehavior. This method will verify the\nequivocation proof and validate the given key ownership proof\nagainst the extracted offender. If both are valid, the offence\nwill be reported.', 'module_prefix': 'Grandpa', 'module_name': 'Grandpa', 'spec_version': 100}, {'call_name': 'report_equivocation_unsigned', 'call_args': [{'name': 'equivocation_proof', 'type': 73, 'typeName': 'Box<EquivocationProof<T::Hash, T::BlockNumber>>', 'docs': []}, {'name': 'key_owner_proof', 'type': 84, 'typeName': 'T::KeyOwnerProof', 'docs': []}], 'documentation': 'Report voter equivocation/misbehavior. This method will verify the\nequivocation proof and validate the given key ownership proof\nagainst the extracted offender. If both are valid, the offence\nwill be reported.\n\nThis extrinsic must be called unsigned and it is expected that only\nblock authors will call it (validated in `ValidateUnsigned`), as such\nif the block author is defined it will be defined as the equivocation\nreporter.', 'module_prefix': 'Grandpa', 'module_name': 'Grandpa', 'spec_version': 100}, {'call_name': 'note_stalled', 'call_args': [{'name': 'delay', 'type': 4, 'typeName': 'T::BlockNumber', 'docs': []}, {'name': 'best_finalized_block_number', 'type': 4, 'typeName': 'T::BlockNumber', 'docs': []}], 'documentation': 'Note that the current authority set of the GRANDPA finality gadget has\nstalled. This will trigger a forced authority set change at the beginning\nof the next session, to be enacted `delay` blocks after that. The delay\nshould be high enough to safely assume that the block signalling the\nforced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters\nwill start the new authority set using the given finalized block as base.\nOnly callable by root.', 'module_prefix': 'Grandpa', 'module_name': 'Grandpa', 'spec_version': 100}, {'call_name': 'transfer', 'call_args': [{'name': 'dest', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'value', 'type': 98, 'typeName': 'T::Balance', 'docs': []}], 'documentation': "Transfer some liquid free balance to another account.\n\n`transfer` will set the `FreeBalance` of the sender and receiver.\nIt will decrease the total issuance of the system by the `TransferFee`.\nIf the sender's account is below the existential deposit as a result\nof the transfer, the account will be reaped.\n\nThe dispatch origin for this call must be `Signed` by the transactor.\n\n# <weight>\n- Dependent on arguments but not critical, given proper implementations for input config\n  types. See related functions below.\n- It contains a limited number of reads and writes internally and no complex\n  computation.\n\nRelated functions:\n\n  - `ensure_can_withdraw` is always called internally but has a bounded complexity.\n  - Transferring balances to accounts that did not exist before will cause\n    `T::OnNewAccount::on_new_account` to be called.\n  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.\n  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check\n    that the transfer will not kill the origin account.\n---------------------------------\n- Base Weight: 73.64 µs, worst case scenario (account created, account removed)\n- DB Weight: 1 Read and 1 Write to destination account\n- Origin account is already in memory, so no DB operations for them.\n# </weight>", 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 100}, {'call_name': 'set_balance', 'call_args': [{'name': 'who', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'new_free', 'type': 98, 'typeName': 'T::Balance', 'docs': []}, {'name': 'new_reserved', 'type': 98, 'typeName': 'T::Balance', 'docs': []}], 'documentation': 'Set the balances of a given account.\n\nThis will alter `FreeBalance` and `ReservedBalance` in storage. it will\nalso decrease the total issuance of the system (`TotalIssuance`).\nIf the new free or reserved balance is below the existential deposit,\nit will reset the account nonce (`frame_system::AccountNonce`).\n\nThe dispatch origin for this call is `root`.\n\n# <weight>\n- Independent of the arguments.\n- Contains a limited number of reads and writes.\n---------------------\n- Base Weight:\n    - Creating: 27.56 µs\n    - Killing: 35.11 µs\n- DB Weight: 1 Read, 1 Write to `who`\n# </weight>', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 100}, {'call_name': 'force_transfer', 'call_args': [{'name': 'source', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'dest', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'value', 'type': 98, 'typeName': 'T::Balance', 'docs': []}], 'documentation': 'Exactly as `transfer`, except the origin must be root and the source account may be\nspecified.\n# <weight>\n- Same as transfer, but additional read and write because the source account is not\n  assumed to be in the overlay.\n# </weight>', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 100}, {'call_name': 'transfer_keep_alive', 'call_args': [{'name': 'dest', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'value', 'type': 98, 'typeName': 'T::Balance', 'docs': []}], 'documentation': 'Same as the [`transfer`] call, but with a check that the transfer will not kill the\norigin account.\n\n99% of the time you want [`transfer`] instead.\n\n[`transfer`]: struct.Pallet.html#method.transfer\n# <weight>\n- Cheaper than transfer because account cannot be killed.\n- Base Weight: 51.4 µs\n- DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)\n#</weight>', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 100}, {'call_name': 'transfer_all', 'call_args': [{'name': 'dest', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'keep_alive', 'type': 46, 'typeName': 'bool', 'docs': []}], 'documentation': "Transfer the entire transferable balance from the caller account.\n\nNOTE: This function only attempts to transfer _transferable_ balances. This means that\nany locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be\ntransferred by this function. To ensure that this function results in a killed account,\nyou might need to prepare the account by removing any reference counters, storage\ndeposits, etc...\n\nThe dispatch origin of this call must be Signed.\n\n- `dest`: The recipient of the transfer.\n- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all\n  of the funds the account has, causing the sender account to be killed (false), or\n  transfer everything except at least the existential deposit, which will guarantee to\n  keep the sender account alive (true). # <weight>\n- O(1). Just like transfer, but reading the user's transferable balance first.\n  #</weight>", 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 100}, {'call_name': 'force_unreserve', 'call_args': [{'name': 'who', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'amount', 'type': 6, 'typeName': 'T::Balance', 'docs': []}], 'documentation': 'Unreserve some balance from a user by force.\n\nCan only be called by ROOT.', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 100}, {'call_name': 'sudo', 'call_args': [{'name': 'call', 'type': 105, 'typeName': 'Box<<T as Config>::Call>', 'docs': []}], 'documentation': 'Authenticates the sudo key and dispatches a function call with `Root` origin.\n\nThe dispatch origin for this call must be _Signed_.\n\n# <weight>\n- O(1).\n- Limited storage reads.\n- One DB write (event).\n- Weight of derivative `call` execution + 10,000.\n# </weight>', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 100}, {'call_name': 'sudo_unchecked_weight', 'call_args': [{'name': 'call', 'type': 105, 'typeName': 'Box<<T as Config>::Call>', 'docs': []}, {'name': 'weight', 'type': 8, 'typeName': 'Weight', 'docs': []}], 'documentation': 'Authenticates the sudo key and dispatches a function call with `Root` origin.\nThis function does not check the weight of the call, and instead allows the\nSudo user to specify the weight of the call.\n\nThe dispatch origin for this call must be _Signed_.\n\n# <weight>\n- O(1).\n- The weight of this call is defined by the caller.\n# </weight>', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 100}, {'call_name': 'set_key', 'call_args': [{'name': 'new', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}], 'documentation': 'Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo\nkey.\n\nThe dispatch origin for this call must be _Signed_.\n\n# <weight>\n- O(1).\n- Limited storage reads.\n- One DB change.\n# </weight>', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 100}, {'call_name': 'sudo_as', 'call_args': [{'name': 'who', 'type': 95, 'typeName': '<T::Lookup as StaticLookup>::Source', 'docs': []}, {'name': 'call', 'type': 105, 'typeName': 'Box<<T as Config>::Call>', 'docs': []}], 'documentation': 'Authenticates the sudo key and dispatches a function call with `Signed` origin from\na given account.\n\nThe dispatch origin for this call must be _Signed_.\n\n# <weight>\n- O(1).\n- Limited storage reads.\n- One DB write (event).\n- Weight of derivative `call` execution + 10,000.\n# </weight>', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 100}, {'call_name': 'addEscrow', 'call_args': [], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'addAssetAdmin', 'call_args': [{'name': 'assetAdmin', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'addAssetServiceAdmin', 'call_args': [{'name': 'assetServiceAdmin', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'addVehicle', 'call_args': [{'name': 'vehicle', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'createAssetDemand', 'call_args': [{'name': 'criteria', 'type': 8, 'typeName': 'u64', 'docs': []}, {'name': 'price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'mint', 'call_args': [{'name': 'amount', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'transferfromescrow', 'call_args': [{'name': 'to', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}, {'name': 'amount', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'create_asset', 'call_args': [{'name': 'first_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}, {'name': 'first_criteria', 'type': 8, 'typeName': 'u64', 'docs': []}, {'name': 'price_threshold', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'set_asset_price', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'new_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}, {'name': 'threshold_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': 'Weight: `O(1)`', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'buy_asset', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'ask_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'submit_asset_proof', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'proof', 'type': 9, 'typeName': 'T::Hash', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'submit_asset_proof_final', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'proof', 'type': 9, 'typeName': 'T::Hash', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'bidAsset', 'call_args': [{'name': 'to', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}, {'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'ask_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'accept_bid', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'bid_threshold_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'create_asset_service', 'call_args': [{'name': 'first_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}, {'name': 'first_criteria', 'type': 8, 'typeName': 'u64', 'docs': []}, {'name': 'price_threshold', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'broadcast_asset_service', 'call_args': [{'name': 'asset_service_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'criteria', 'type': 10, 'typeName': 'Vec<u8>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'assetServiceInterest', 'call_args': [{'name': 'to', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}, {'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'ask_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'set_asset_service_price', 'call_args': [{'name': 'asset_service_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'new_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}, {'name': 'threshold_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': 'Weight: `O(1)`', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'submit_asset_service_proof', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'proof', 'type': 9, 'typeName': 'T::Hash', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'submit_asset_service_proof_final', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'proof', 'type': 9, 'typeName': 'T::Hash', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'transferAssetService', 'call_args': [{'name': 'to', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}, {'name': 'asset_service_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'bidAssetService', 'call_args': [{'name': 'to', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}, {'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'ask_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'accept_bid_service', 'call_args': [{'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'bid_threshold_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'buy_asset_service', 'call_args': [{'name': 'asset_service_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}, {'name': 'ask_price', 'type': 6, 'typeName': 'BalanceOf<T>', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}, {'call_name': 'transferAsset', 'call_args': [{'name': 'to', 'type': 0, 'typeName': 'T::AccountId', 'docs': []}, {'name': 'asset_id', 'type': 9, 'typeName': 'T::Hash', 'docs': []}], 'documentation': '', 'module_prefix': 'TemplateModule', 'module_name': 'TemplateModule', 'spec_version': 100}]
